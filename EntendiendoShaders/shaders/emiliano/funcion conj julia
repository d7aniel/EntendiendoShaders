float cJulia(vec2   uv){
    const int maxIteraciones = 25;
	float zr = uv.x;
	float zi = uv.y;
	float cr = sin(u_time);
	float ci = cos(u_time*.2);
	int iteracion = 0;

	float R = 2.;
	float RR = R*R;
	for(int i=0;i < maxIteraciones ;i++){
		float zrzrzizi = zr*zr-zi*zi;
		if( zr*zr+zi*zi > RR){
			break;
		}
		zi = 2.*zr*zi+ci;
		zr = zrzrzizi+cr;
		iteracion++;
	}

    return float(iteracion)/float(maxIteraciones);
}


float cJuliaSmooth(vec2   uv){
    const int maxIteraciones = 200;
	float zr = uv.x;
	float zi = uv.y;
	float cr = sin(u_time*0.1);
	float ci = cos(u_time*.2);
	float iteraciones = 0.;

	float R = 256.;
	float RR = R*R;
	for(int i=0;i < maxIteraciones ;i++){
		float zrzrzizi = zr*zr-zi*zi;
		if( zr*zr+zi*zi > RR){
			break;
		}
		zi = 2.*zr*zi+ci;
		zr = zrzrzizi+cr;
		iteraciones++;
	}

    vec2 z = vec2(zr,zi);
	// return iteraciones/float(maxIteraciones);	
   return (iteraciones - log2(log2(dot(z,z))) + 4.0)*0.025 ;//iteracion/float(maxIteraciones);

}